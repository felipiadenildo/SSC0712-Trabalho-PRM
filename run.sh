#!/bin/bash

# Script simplificado para controlar a compilaÃ§Ã£o e execuÃ§Ã£o do projeto ROS 2
# Use: ./run.sh [opÃ§Ãµes]   (ex: ./run.sh irt)
#      ./run.sh stop         (para encerrar tudo)

# --- ConfiguraÃ§Ãµes ---
ROS2_WORKSPACE="/ros2_ws"
GAZEBO_WORLD="empty_arena.sdf"
LAUNCH_PACKAGE="prm"

# --- FunÃ§Ãµes ---

# Encerra todos os processos e terminais da simulaÃ§Ã£o
cleanup() {
    echo "--- Encerrando simulaÃ§Ã£o e todos os processos relacionados... ---"
    # Mata os terminais pelo tÃ­tulo Ãºnico. O '-f' busca por toda a linha de comando.
    pkill -f "ROS2 - SIMULAÃ‡ÃƒO Gazebo" && echo "âœ… Terminal da SimulaÃ§Ã£o encerrado."
    pkill -f "ROS2 - ROBÃ” e Controle" && echo "âœ… Terminal do RobÃ´ encerrado."
    pkill -f "ROS2 - Teste" && echo "âœ… Terminal de Teste encerrado."
    sleep 1
    # Garante que os processos do Gazebo sejam finalizados
    killall -q gzserver gzclient rviz2
    echo "Limpeza concluÃ­da. ðŸ‘‹"
}

# Exibe a ajuda do script
show_help() {
    echo "Uso: ./run.sh [opÃ§Ãµes]"
    echo "OpÃ§Ãµes de inicializaÃ§Ã£o (podem ser combinadas):"
    echo "  i     -> Inicia o terminal da SimulaÃ§Ã£o com Gazebo."
    echo "  r     -> Inicia o terminal do RobÃ´ (controladores e RViz)."
    echo "  t     -> Inicia um terminal de Teste para comandos manuais."
    echo "  Exemplos: ./run.sh i    (sÃ³ simulaÃ§Ã£o)"
    echo "            ./run.sh ir   (simulaÃ§Ã£o e robÃ´)"
    echo "            ./run.sh irt  (tudo)"
    echo ""
    echo "OpÃ§Ã£o de encerramento:"
    echo "  stop  -> Encerra todos os terminais e processos da simulaÃ§Ã£o."
}

# --- LÃ³gica Principal ---

# Se o comando for "stop", limpa tudo e sai.
if [ "$1" == "stop" ]; then
    cleanup
    exit 0
fi

# Se nenhum argumento for passado, mostra a ajuda e sai.
if [ -z "$1" ]; then
    show_help
    exit 1
fi

# --- PreparaÃ§Ã£o e CompilaÃ§Ã£o (executado para qualquer opÃ§Ã£o de inicializaÃ§Ã£o) ---
echo "--- Preparando o ambiente e compilando o workspace... ---"
cd "$ROS2_WORKSPACE" || exit 1
colcon build || exit 1
source install/setup.bash || exit 1
echo "Ambiente pronto. âœ…"

# --- LanÃ§amento dos Terminais com base nos parÃ¢metros ---
echo "--- Iniciando terminais solicitados ($1)... ---"

# Verifica se 'i' estÃ¡ no argumento para iniciar a SIMULAÃ‡ÃƒO
if [[ "$1" == *i* ]]; then
    # O '2>/dev/null' OCULTA a mensagem "Couldn't connect to accessibility bus"
    gnome-terminal --title="ROS2 - SIMULAÃ‡ÃƒO Gazebo" -- bash -c "source install/setup.bash; ros2 launch ${LAUNCH_PACKAGE} inicia_simulacao.launch.py world:=${GAZEBO_WORLD}; exec bash" &
    echo "ðŸš€ Terminal da SimulaÃ§Ã£o iniciado."
fi

# Verifica se 'r' estÃ¡ no argumento para iniciar o ROBÃ”
if [[ "$1" == *r* ]]; then
    gnome-terminal --title="ROS2 - ROBÃ” e Controle" -- bash -c "source install/setup.bash; ros2 launch ${LAUNCH_PACKAGE} carrega_robo.launch.py; exec bash" &
    echo "ðŸ¤– Terminal do RobÃ´ iniciado."
fi

# Verifica se 't' estÃ¡ no argumento para iniciar o terminal de TESTE
if [[ "$1" == *t* ]]; then
    gnome-terminal --title="ROS2 - Teste" -- bash -c "source install/setup.bash; echo 'Use este terminal para comandos manuais.'; exec bash" &
    echo "ðŸ§ª Terminal de Teste iniciado."
fi

echo -e "\nProcesso de inicializaÃ§Ã£o concluÃ­do! âœ¨"