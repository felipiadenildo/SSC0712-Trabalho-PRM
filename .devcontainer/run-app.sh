#!/bin/bash
# Painel de Controle Avan√ßado para o Ambiente de Desenvolvimento ROS 2.
# Este script automatiza a compila√ß√£o, atualiza√ß√£o, execu√ß√£o e finaliza√ß√£o
# de todos os componentes do projeto, utilizando o 'terminator' para
# organizar os processos em pain√©is de terminal separados.

# --- Configura√ß√µes Globais ---
# Usar 'readonly' torna as vari√°veis imut√°veis, evitando altera√ß√µes acidentais.
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

readonly WORKSPACE="/home/ros/ros2_ws"
readonly PACKAGE_NAME="prm"

# --- Fun√ß√µes de L√≥gica ---

# COMPILA o workspace do ROS 2.
func_build() {
    echo -e "${GREEN}=== Construindo o Workspace (${PACKAGE_NAME}) ===${NC}"
    cd "${WORKSPACE}"
    colcon build --symlink-install --packages-select "${PACKAGE_NAME}"
    echo -e "${GREEN}Constru√ß√£o finalizada com sucesso!${NC}"
}

# ATUALIZA e instala as depend√™ncias do projeto.
func_update_deps() {
    echo -e "${YELLOW}=== Atualizando Depend√™ncias (rosdep) ===${NC}"
    cd "${WORKSPACE}"
    # Fonteia o ambiente ROS base para garantir que rosdep seja encontrado.
    source /opt/ros/humble/setup.bash
    rosdep install --from-paths src -i -y --ignore-src
    echo -e "${GREEN}Depend√™ncias atualizadas!${NC}"
}

# INICIA a aplica√ß√£o completa em um layout de terminais separados.
func_start() {
    # Verifica se o workspace foi compilado antes de tentar executar.
    if [ ! -f "${WORKSPACE}/install/setup.bash" ]; then
        echo -e "${RED}Erro: O workspace ainda n√£o foi compilado.${NC}"
        echo -e "Execute o comando '${YELLOW}runapp build${NC}' primeiro."
        exit 1
    fi

    echo -e "${GREEN}üöÄ Iniciando aplica√ß√£o completa em um novo layout do Terminator...${NC}"

    # Define o comando de 'sourcing' que ser√° prefixado em cada comando ROS.
    local source_cmd="source /opt/ros/humble/setup.bash && source ${WORKSPACE}/install/setup.bash"

    # Utiliza o Terminator para criar um layout com 3 pain√©is, cada um com uma tarefa.
    # O 'bash -c "..."' √© usado para encadear comandos em cada painel.
    # O 'exec bash' no final mant√©m o painel aberto e interativo ap√≥s o processo terminar.
    terminator -e "bash -c '${source_cmd}; echo \"Pane 1: Simula√ß√£o (Gazebo)\"; ros2 launch ${PACKAGE_NAME} inicia_simulacao.launch.py; exec bash'" \
               --new-tab -e "bash -c '${source_cmd}; echo \"Pane 2: Planejador de Caminhos\"; sleep 5; ros2 run ${PACKAGE_NAME} path_planner_node; exec bash'" \
               --new-tab -e "bash -c '${source_cmd}; echo \"Pane 3: M√°quina de Estados\"; sleep 5; ros2 run ${PACKAGE_NAME} state_machine_node; exec bash'"
}

# PARA todos os processos relacionados √† aplica√ß√£o.
func_stop() {
    echo -e "${RED}=== Parando todos os processos da aplica√ß√£o ===${NC}"
    # O '|| true' evita que o script pare se um processo n√£o for encontrado.
    pkill -f terminator || true
    pkill -f "gz sim" || true
    pkill -f "ros2 launch ${PACKAGE_NAME}" || true
    pkill -f "ros2 run ${PACKAGE_NAME}" || true
    echo -e "${GREEN}Processos finalizados.${NC}"
}

# LIMPA o workspace, removendo os diret√≥rios de compila√ß√£o.
func_nuke() {
    echo -e "${RED}üî• ATEN√á√ÉO! Isso ir√° parar todos os processos e apagar os diret√≥rios 'build', 'install' e 'log'.${NC}"
    read -p "Voc√™ tem certeza? (s/n): " confirm
    if [[ "$confirm" != "s" ]]; then
        echo "Opera√ß√£o cancelada."
        exit 0
    fi

    func_stop
    echo -e "${YELLOW}Limpando diret√≥rios do workspace...${NC}"
    cd "${WORKSPACE}"
    rm -rf build install log
    echo -e "${GREEN}Limpeza conclu√≠da.${NC}"
}


# MOSTRA o menu de ajuda.
func_usage() {
    echo -e "${YELLOW}Painel de Controle da Aplica√ß√£o ROS${NC}"
    echo -e "------------------------------------"
    echo -e "Uso: runapp [comando]\n"
    echo -e "Comandos de Gerenciamento:"
    echo -e "  ${GREEN}build${NC}        - Compila o workspace."
    echo -e "  ${GREEN}update${NC}       - Instala/atualiza as depend√™ncias (rosdep)."
    echo -e "\nComandos de Execu√ß√£o:"
    echo -e "  ${BLUE}start${NC}        - Inicia a aplica√ß√£o completa (Simula√ß√£o, Planner, Controle)."
    echo -e "  ${RED}stop${NC}         - Para todos os processos da aplica√ß√£o."
    echo -e "\nComandos Destrutivos:"
    echo -e "  ${RED}nuke${NC}         - Para tudo e limpa os diret√≥rios 'build', 'install', 'log'."
}

# --- Roteador Principal de Comandos ---

# Se nenhum comando for fornecido, mostra o menu de ajuda.
if [ $# -eq 0 ]; then
    func_usage
    exit 0
fi

# Roteia o primeiro argumento ($1) para a fun√ß√£o correspondente.
case "$1" in
    start)
        func_start
        ;;
    stop)
        func_stop
        ;;
    build)
        func_build
        ;;
    update)
        func_update_deps
        ;;
    nuke)
        func_nuke
        ;;
    *)
        echo -e "${RED}Erro: Comando '$1' desconhecido.${NC}"
        func_usage
        exit 1
        ;;
esac