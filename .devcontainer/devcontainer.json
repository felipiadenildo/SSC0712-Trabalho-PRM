{
    "name": "ROS 2 Humble PRM Project",
    "dockerFile": "../Dockerfile",
    "context": "..",
    // Container configuration
    "workspaceFolder": "/ros2_ws",
    "workspaceMount": "source=${localWorkspaceFolder},target=/ros2_ws/src/prm,type=bind,consistency=cached",
    "remoteUser": "ros",
    // Hardware and display configuration
    "runArgs": [
        "--privileged",
        "--net=host",
        "--ipc=host",
        "--gpus=all",
        "--security-opt=seccomp:unconfined",
        "-e",
        "DISPLAY=${env:DISPLAY}",
        "-e",
        "QT_X11_NO_MITSHM=1",
        "-e",
        "XAUTHORITY=/tmp/.docker.xauth",
        "-v",
        "/tmp/.X11-unix:/tmp/.X11-unix",
        "-v",
        "/etc/localtime:/etc/localtime:ro"
    ],
    // Initialization commands
    "initializeCommand": {
        "command": "sh",
        "args": [
            "-c",
            "xhost +local: && touch ${localWorkspaceFolder}/.devcontainer/.docker.xauth && xauth nlist $DISPLAY | sed -e 's/^..../ffff/' | xauth -f ${localWorkspaceFolder}/.devcontainer/.docker.xauth nmerge -"
        ]
    },
    "mounts": [
        "source=/dev/dri,target=/dev/dri,type=bind", // Better GPU passthrough
        "source=/tmp/.X11-unix,target=/tmp/.X11-unix,type=bind"
    ],
    "containerEnv": {
        "DISPLAY": "${localEnv:DISPLAY}",
        "LIBGL_ALWAYS_SOFTWARE": "0" // Enable hardware rendering
    },
    
    "postCreateCommand": [
        // Fix permissions first
        "sudo chown -R ros:ros /ros2_ws",
        // Then run the setup script with controlled verbosity
        "bash -c 'source /ros2_ws/src/prm/.devcontainer/ros-setup.sh 2>&1 | tee /ros2_ws/setup.log'",
        // Final verification
        "bash -c 'if [ -f /ros2_ws/install/setup.bash ]; then echo \"âœ“ Setup completed successfully\"; else echo \"! Setup failed - check /ros2_ws/setup.log\"; exit 1; fi'"
    ],
    "postAttachCommand": "bash -c 'source /ros2_ws/src/prm/.devcontainer/ros-setup.sh --quick-check'",
    // Port forwarding for web tools
    "forwardPorts": [
        6080, // For noVNC if needed
        8888 // For Jupyter notebooks
    ],
    // Customizations
    "customizations": {
        "vscode": {
            "settings": {
                "python.defaultInterpreterPath": "/usr/bin/python3",
                "python.linting.enabled": true,
                "python.linting.flake8Enabled": true,
                "python.linting.pylintEnabled": false,
                "python.formatting.provider": "black",
                "python.formatting.blackArgs": [
                    "--line-length",
                    "120"
                ],
                "python.analysis.extraPaths": [
                    "/opt/ros/humble/lib/python3.10/site-packages",
                    "/ros2_ws/install/prm/lib/python3.10/site-packages"
                ],
                "ros.distro": "humble",
                "editor.formatOnSave": true,
                "files.associations": {
                    "*.launch.py": "python",
                    "*.world": "xml",
                    "*.sdf": "xml",
                    "*.xacro": "xml",
                    "*.urdf": "xml"
                },
                "terminal.integrated.defaultProfile.linux": "ros",
                "terminal.integrated.profiles.linux": {
                    "ros": {
                        "path": "bash",
                        "args": [
                            "-ic",
                            "source /opt/ros/humble/setup.bash && source /ros2_ws/install/setup.bash && cd /ros2_ws && bash"
                        ]
                    }
                }
            },
            "extensions": [
                "ms-python.python",
                "ms-python.vscode-pylance",
                "ms-python.black-formatter",
                "ms-python.flake8",
                "redhat.vscode-yaml",
                "redhat.vscode-xml",
                "twxs.cmake",
                "ms-vscode.cpptools",
                "dotjoshjohnson.xml",
                "eamodio.gitlens"
            ]
        }
    },
    // Features to install (Docker-in-Docker, etc)
    "features": {
        "ghcr.io/devcontainers/features/docker-in-docker:2": {
            "version": "latest",
            "moby": true
        },
        "ghcr.io/devcontainers/features/common-utils:2": {
            "installZsh": false,
            "username": "ros",
            "upgradePackages": false
        }
    }
}